import { APIResponse } from "../../types/api";
import { Tokens } from "../../types/general";
import { BungieMembershipType, ChatSecuritySetting, GroupHomepage, GroupMemberCountFilter, GroupPostPublicity, GroupType, HostGuidedGamesPermissionLevel, MembershipOption, RuntimeGroupMemberType } from "../../types/enum";
import { EntityActionResult, GetGroupsForMemberResponse, GroupApplicationResponse, GroupMemberLeaveResult, GroupMembershipSearchResponse, GroupOptionalConversation, GroupPotentialMembershipSearchResponse, GroupResponse, GroupSearchResponse, GroupTheme, GroupV2Card, SearchResultOfGroupBan, SearchResultOfGroupMember, SearchResultOfGroupMemberApplication, UserMembership } from "../../types/interface";
export declare class GroupV2 {
    private url;
    private headers;
    constructor(url: string, headers: {
        [key: string]: string;
    });
    /**
     * Returns a list of all available group avatars for the signed-in user.
     * @returns A list of all available group avatars for the signed-in user.
     */
    GetAvailableAvatars(): Promise<APIResponse<{
        [key: string]: string;
    }>>;
    /**
     * Returns a list of all available group themes.
     * @returns A list of all available group themes.
     */
    GetAvailableThemes(): Promise<APIResponse<GroupTheme[]>>;
    /**
     * Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
     * @param membershipType The types of membership the Accounts system supports.
     * @param tokens The optional tokens that can be applied.
     * @returns The state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
     */
    GetUserClanInviteSetting(membershipType: BungieMembershipType, tokens?: Tokens): Promise<APIResponse<boolean>>;
    /**
     * Gets groups recommended for you based on the groups to whom those you follow belong.
     * @param createDateRange Requested range in which to pull recommended groups
     * @param groupType Type of groups requested
     * @param tokens The optional tokens that can be applied.
     * @returns Groups recommended for you based on the groups to whom those you follow belong.
     */
    GetRecommendedGroups(createDateRange: number, groupType: GroupType, tokens?: Tokens): Promise<APIResponse<GroupV2Card[]>>;
    /**
     * Search for Groups.
     * @param name
     * @param groupType
     * @param creationDate
     * @param sortBy
     * @param groupMemberCountFilter
     * @param localeFilter
     * @param tagText
     * @param itemsPerPage
     * @param currentPage
     * @param requestContinuationToken
     * @returns Groups.
     */
    GroupSearch(name: string, groupType: GroupType, creationDate: number, sortBy: number, groupMemberCountFilter: GroupMemberCountFilter, localeFilter: string, tagText: string, itemsPerPage: number, currentPage: number, requestContinuationToken: string): Promise<APIResponse<GroupSearchResponse>>;
    /**
     * Get information about a specific group of the given ID.
     * @param groupId Requested group's id.
     * @returns Information about a specific group of the given ID.
     */
    GetGroup(groupId: string): Promise<APIResponse<GroupResponse>>;
    /**
     * Get information about a specific group with the given name and type.
     * @param groupName Exact name of the group to find.
     * @param groupType Type of group to find.
     * @returns Information about a specific group with the given name and type.
     */
    GetGroupByName(groupName: string, groupType: GroupType): Promise<APIResponse<GroupResponse>>;
    /**
     * Get information about a specific group with the given name and type.
     * @param groupName Exact name of the group to find.
     * @param groupType Type of group to find.
     * @returns Information about a specific group with the given name and type.
     */
    GetGroupByNameV2(groupName: string, groupType: GroupType): Promise<APIResponse<GroupResponse>>;
    /**
     * Gets a list of available optional conversation channels and their settings.
     * @param groupId Requested group's id.
     * @returnsA list of available optional conversation channels and their settings.
     */
    GetGroupOptionalConversations(groupId: string): Promise<APIResponse<GroupOptionalConversation[]>>;
    /**
     * Edit an existing group.
     * @param groupId Group ID of the group to edit.
     * @param name
     * @param about
     * @param motto
     * @param theme
     * @param avatarImageIndex
     * @param tags
     * @param isPublic
     * @param membershipOption
     * @param isPublicTopicAdminOnly
     * @param allowChat
     * @param chatSecurity
     * @param callsign
     * @param locale
     * @param homepage
     * @param enableInvitationMessagingForAdmins
     * @param defaultPublicity
     * @param tokens The optional tokens that can be applied.
     * @returns Edit an existing group.
     */
    EditGroup(groupId: string, name: string, about: string, motto: string, theme: string, avatarImageIndex: number, tags: string, isPublic: boolean, membershipOption: MembershipOption, isPublicTopicAdminOnly: boolean, allowChat: boolean, chatSecurity: ChatSecuritySetting, callsign: string, locale: string, homepage: GroupHomepage, enableInvitationMessagingForAdmins: boolean, defaultPublicity: GroupPostPublicity, tokens?: Tokens): Promise<APIResponse<number>>;
    /**
     * Edit an existing group's clan banner.
     * @param groupId Group ID of the group to edit.
     * @param decalId
     * @param decalColorId
     * @param decalBackgroundColorId
     * @param gonfalonId
     * @param gonfalonColorId
     * @param gonfalonDetailId
     * @param gonfalonDetailColorId
     * @param tokens The optional tokens that can be applied.
     * @returns Edit an existing group's clan banner.
     */
    EditClanBanner(groupId: string, decalId: number, decalColorId: number, decalBackgroundColorId: number, gonfalonId: number, gonfalonColorId: number, gonfalonDetailId: number, gonfalonDetailColorId: number, tokens?: Tokens): Promise<APIResponse<number>>;
    /**
     * Edit group options only available to a founder.
     * @param groupId Group ID of the group to edit.
     * @param InvitePermissionOverride
     * @param UpdateCulturePermissionOverride
     * @param HostGuidedGamePermissionOverride
     * @param UpdateBannerPermissionOverride
     * @param JoinLevel
     * @param tokens The optional tokens that can be applied.
     * @returns Group options only available to a founder.
     */
    EditFounderOptions(groupId: string, InvitePermissionOverride: boolean, UpdateCulturePermissionOverride: boolean, HostGuidedGamePermissionOverride: HostGuidedGamesPermissionLevel, UpdateBannerPermissionOverride: boolean, JoinLevel: RuntimeGroupMemberType, tokens?: Tokens): Promise<APIResponse<number>>;
    /**
     * Add a new optional conversation/chat channel. Requires admin permissions to the group.
     * @param groupId Group ID of the group to edit.
     * @param chatName
     * @param chatSecurity
     * @param tokens The optional tokens that can be applied.
     * @returns A new optional conversation/chat channel. Requires admin permissions to the group.
     */
    AddOptionalConversation(groupId: string, chatName: string, chatSecurity: ChatSecuritySetting, tokens?: Tokens): Promise<APIResponse<string>>;
    /**
     * Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
     * @param conversationId Conversation Id of the channel being edited.
     * @param groupId Group ID of the group to edit.
     * @param chatEnabled
     * @param chatName
     * @param chatSecurity
     * @param tokens The optional tokens that can be applied.
     * @returns The settings of an optional conversation/chat channel. Requires admin permissions to the group.
     */
    EditOptionalConversation(conversationId: string, groupId: string, chatEnabled: boolean, chatName: string, chatSecurity: ChatSecuritySetting, tokens?: Tokens): Promise<APIResponse<string>>;
    /**
     * Get the list of members in a given group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param groupId The ID of the group.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns The list of members in a given group.
     */
    GetMembersOfGroup(currentpage: number, groupId: string, queryString?: {
        memberType?: RuntimeGroupMemberType;
        nameSearch?: string;
    }, tokens?: Tokens): Promise<APIResponse<SearchResultOfGroupMember>>;
    /**
     * Get the list of members in a given group who are of admin level or higher.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param groupId The ID of the group.
     * @param tokens The optional tokens that can be applied.
     * @returns The list of members in a given group who are of admin level or higher.
     */
    GetAdminsAndFounderOfGroup(currentpage: number, groupId: string, tokens?: Tokens): Promise<APIResponse<SearchResultOfGroupMember>>;
    /**
     * Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
     * @param groupId ID of the group to which the member belongs.
     * @param membershipId Membership ID to modify.
     * @param membershipType Membership type of the provide membership ID.
     * @param memberType New membertype for the specified member.
     * @param tokens The optional tokens that can be applied.
     * @returns The membership type of a given member. You must have suitable permissions in the group to perform this operation.
     */
    EditGroupMembership(groupId: string, membershipId: string, membershipType: BungieMembershipType, memberType: RuntimeGroupMemberType, tokens?: Tokens): Promise<APIResponse<number>>;
    /**
     * Kick a member from the given group, forcing them to reapply if they wish to re-join the group.
     * @param groupId Group ID to kick the user from.
     * @param membershipId Membership ID to kick.
     * @param membershipType Membership type of the provided membership ID.
     * @param tokens The optional tokens that can be applied.
     * @returns A member from the given group, forcing them to reapply if they wish to re-join the group.
     */
    KickMember(groupId: string, membershipId: string, membershipType: BungieMembershipType, tokens?: Tokens): Promise<APIResponse<GroupMemberLeaveResult>>;
    /**
     * Bans the requested member from the requested group for the specified period of time.
     * @param groupId Group ID that has the member to ban.
     * @param membershipId Membership ID of the member to ban from the group.
     * @param membershipType Membership type of the provided membership ID.
     * @param comment
     * @param length
     * @param tokens The optional tokens that can be applied.
     * @returns The requested member from the requested group for the specified period of time.
     */
    BanMember(groupId: string, membershipId: string, membershipType: BungieMembershipType, comment: string, length: number, tokens?: Tokens): Promise<APIResponse<number>>;
    /**
     * Unbans the requested member, allowing them to re-apply for membership.
     * @param groupId Group ID that has the member to ban.
     * @param membershipId Membership ID of the member to ban from the group.
     * @param membershipType Membership type of the provided membership ID.
     * @param tokens The optional tokens that can be applied.
     * @returns The requested member, allowing them to re-apply for membership.
     */
    UnbanMember(groupId: string, membershipId: string, membershipType: BungieMembershipType, tokens?: Tokens): Promise<APIResponse<number>>;
    /**
     * Get the list of banned members in a given group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 entries.
     * @param groupId Group ID whose banned members you are fetching
     * @param tokens The optional tokens that can be applied.
     * @returns The list of banned members in a given group.
     */
    GetBannedMembersOfGroup(currentpage: number, groupId: string, tokens?: Tokens): Promise<APIResponse<SearchResultOfGroupBan>>;
    /**
     * An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
     * @param founderIdNew The new founder for this group. Must already be a group admin.
     * @param groupId The target group id.
     * @param membershipType Membership type of the provided founderIdNew.
     * @param tokens The optional tokens that can be applied.
     * @returns Administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
     */
    AbdicateFoundership(founderIdNew: string, groupId: string, membershipType: BungieMembershipType, tokens?: Tokens): Promise<APIResponse<boolean>>;
    /**
     * Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param groupId ID of the group.
     * @param tokens The optional tokens that can be applied.
     * @returns The list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
     */
    GetPendingMemberships(currentpage: number, groupId: string, tokens?: Tokens): Promise<APIResponse<SearchResultOfGroupMemberApplication>>;
    /**
     * Get the list of users who have been invited into the group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param groupId ID of the group.
     * @param tokens The optional tokens that can be applied.
     * @returns The list of users who have been invited into the group.
     */
    GetInvitedIndividuals(currentpage: number, groupId: string, tokens?: Tokens): Promise<APIResponse<SearchResultOfGroupMemberApplication>>;
    /**
     * Approve all of the pending users for the given group.
     * @param groupId ID of the group.
     * @param message
     * @param tokens The optional tokens that can be applied.
     * @returns All of the pending users for the given group.
     */
    ApproveAllPending(groupId: string, message: string, tokens?: Tokens): Promise<APIResponse<EntityActionResult[]>>;
    /**
     * Deny all of the pending users for the given group.
     * @param groupId ID of the group.
     * @param message
     * @param tokens The optional tokens that can be applied.
     * @returns All of the pending users for the given group.
     */
    DenyAllPending(groupId: string, message: string, tokens?: Tokens): Promise<APIResponse<EntityActionResult[]>>;
    /**
     * Approve all of the pending users for the given group.
     * @param groupId ID of the group.
     * @param memberships
     * @param message
     * @param tokens The optional tokens that can be applied.
     * @returns All of the pending users for the given group.
     */
    ApprovePendingForList(groupId: string, memberships: UserMembership[], message: string, tokens?: Tokens): Promise<APIResponse<EntityActionResult[]>>;
    /**
     * Approve the given membershipId to join the group/clan as long as they have applied.
     * @param groupId ID of the group.
     * @param membershipId The membership id being approved.
     * @param membershipType Membership type of the supplied membership ID.
     * @param message
     * @param tokens The optional tokens that can be applied.
     * @returns The given membershipId to join the group/clan as long as they have applied.
     */
    ApprovePending(groupId: string, membershipId: string, membershipType: BungieMembershipType, message: string, tokens?: Tokens): Promise<APIResponse<boolean>>;
    /**
     * Deny all of the pending users for the given group that match the passed-in .
     * @param groupId ID of the group.
     * @param memberships
     * @param message
     * @param tokens The optional tokens that can be applied.
     * @returns All of the pending users for the given group that match the passed-in .
     */
    DenyPendingForList(groupId: string, memberships: UserMembership[], message: string, tokens?: Tokens): Promise<APIResponse<EntityActionResult[]>>;
    /**
     * Get information about the groups that a given member has joined.
     * @param filter Filter apply to list of joined groups.
     * @param groupType Type of group the supplied member founded.
     * @param membershipId Membership ID to for which to find founded groups.
     * @param membershipType Membership type of the supplied membership ID.
     * @param tokens The optional tokens that can be applied.
     * @returns Information about the groups that a given member has joined.
     */
    GetGroupsForMember(filter: number, groupType: GroupType, membershipId: string, membershipType: BungieMembershipType, tokens?: Tokens): Promise<APIResponse<GetGroupsForMemberResponse>>;
    /**
     * Allows a founder to manually recover a group they can see in game but not on bungie.net
     * @param groupType Type of group the supplied member founded.
     * @param membershipId Membership ID to for which to find founded groups.
     * @param membershipType Membership type of the supplied membership ID.
     * @param tokens The optional tokens that can be applied.
     * @returns A founder to manually recover a group they can see in game but not on bungie.net
     */
    RecoverGroupForFounder(groupType: GroupType, membershipId: string, membershipType: BungieMembershipType, tokens?: Tokens): Promise<APIResponse<GroupMembershipSearchResponse>>;
    /**
     * Get information about the groups that a given member has applied to or been invited to.
     * @param filter Filter apply to list of potential joined groups.
     * @param groupType Type of group the supplied member applied.
     * @param membershipId Membership ID to for which to find applied groups.
     * @param membershipType Membership type of the supplied membership ID.
     * @param tokens The optional tokens that can be applied.
     * @returns Information about the groups that a given member has applied to or been invited to.
     */
    GetPotentialGroupsForMember(filter: number, groupType: GroupType, membershipId: string, membershipType: BungieMembershipType, tokens?: Tokens): Promise<APIResponse<GroupPotentialMembershipSearchResponse>>;
    /**
     * Invite a user to join this group.
     * @param groupId ID of the group you would like to join.
     * @param membershipId Membership id of the account being invited.
     * @param membershipType MembershipType of the account being invited.
     * @param message
     * @param tokens The optional tokens that can be applied.
     * @returns A user to join this group.
     */
    IndividualGroupInvite(groupId: string, membershipId: string, membershipType: BungieMembershipType, message: string, tokens?: Tokens): Promise<APIResponse<GroupApplicationResponse>>;
    /**
     * Cancels a pending invitation to join a group.
     * @param groupId ID of the group you would like to join.
     * @param membershipId Membership id of the account being cancelled.
     * @param membershipType MembershipType of the account being cancelled.
     * @param tokens The optional tokens that can be applied.
     * @returns A pending invitation to join a group.
     */
    IndividualGroupInviteCancel(groupId: string, membershipId: string, membershipType: BungieMembershipType, tokens?: Tokens): Promise<APIResponse<GroupApplicationResponse>>;
}
