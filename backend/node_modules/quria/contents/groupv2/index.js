"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupV2 = void 0;
const http_request_1 = require("../../adapters/http-request");
const utils_1 = require("../../adapters/utils");
class GroupV2 {
    url;
    headers;
    constructor(url, headers) {
        this.url = url;
        this.headers = headers;
    }
    /**
     * Returns a list of all available group avatars for the signed-in user.
     * @returns A list of all available group avatars for the signed-in user.
     */
    GetAvailableAvatars() {
        const requestURL = `${this.url}/GroupV2/GetAvailableAvatars/`;
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Returns a list of all available group themes.
     * @returns A list of all available group themes.
     */
    GetAvailableThemes() {
        const requestURL = `${this.url}/GroupV2/GetAvailableThemes/`;
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
     * @param membershipType The types of membership the Accounts system supports.
     * @param tokens The optional tokens that can be applied.
     * @returns The state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
     */
    GetUserClanInviteSetting(membershipType, tokens) {
        const requestURL = `${this.url}/GroupV2/GetUserClanInviteSetting/${membershipType}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets groups recommended for you based on the groups to whom those you follow belong.
     * @param createDateRange Requested range in which to pull recommended groups
     * @param groupType Type of groups requested
     * @param tokens The optional tokens that can be applied.
     * @returns Groups recommended for you based on the groups to whom those you follow belong.
     */
    GetRecommendedGroups(createDateRange, groupType, tokens) {
        const requestURL = `${this.url}/GroupV2/Recommended/${groupType}/${createDateRange}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders);
    }
    /**
     * Search for Groups.
     * @param name
     * @param groupType
     * @param creationDate
     * @param sortBy
     * @param groupMemberCountFilter
     * @param localeFilter
     * @param tagText
     * @param itemsPerPage
     * @param currentPage
     * @param requestContinuationToken
     * @returns Groups.
     */
    GroupSearch(name, groupType, creationDate, sortBy, groupMemberCountFilter, localeFilter, tagText, itemsPerPage, currentPage, requestContinuationToken) {
        const requestURL = `${this.url}/GroupV2/Search/`;
        const bodyParams = {
            name,
            groupType,
            creationDate,
            sortBy,
            groupMemberCountFilter,
            localeFilter,
            tagText,
            itemsPerPage,
            currentPage,
            requestContinuationToken,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", this.headers, JSON.stringify(bodyParams));
    }
    /**
     * Get information about a specific group of the given ID.
     * @param groupId Requested group's id.
     * @returns Information about a specific group of the given ID.
     */
    GetGroup(groupId) {
        const requestURL = `${this.url}/GroupV2/${groupId}/`;
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Get information about a specific group with the given name and type.
     * @param groupName Exact name of the group to find.
     * @param groupType Type of group to find.
     * @returns Information about a specific group with the given name and type.
     */
    GetGroupByName(groupName, groupType) {
        const requestURL = `${this.url}/GroupV2/Name/${groupName}/${groupType}/`;
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Get information about a specific group with the given name and type.
     * @param groupName Exact name of the group to find.
     * @param groupType Type of group to find.
     * @returns Information about a specific group with the given name and type.
     */
    GetGroupByNameV2(groupName, groupType) {
        const requestURL = `${this.url}/GroupV2/NameV2/`;
        const bodyParams = {
            groupName,
            groupType,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", this.headers, JSON.stringify(bodyParams));
    }
    /**
     * Gets a list of available optional conversation channels and their settings.
     * @param groupId Requested group's id.
     * @returnsA list of available optional conversation channels and their settings.
     */
    GetGroupOptionalConversations(groupId) {
        const requestURL = `${this.url}/GroupV2/${groupId}/OptionalConversations/`;
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Edit an existing group.
     * @param groupId Group ID of the group to edit.
     * @param name
     * @param about
     * @param motto
     * @param theme
     * @param avatarImageIndex
     * @param tags
     * @param isPublic
     * @param membershipOption
     * @param isPublicTopicAdminOnly
     * @param allowChat
     * @param chatSecurity
     * @param callsign
     * @param locale
     * @param homepage
     * @param enableInvitationMessagingForAdmins
     * @param defaultPublicity
     * @param tokens The optional tokens that can be applied.
     * @returns Edit an existing group.
     */
    EditGroup(groupId, name, about, motto, theme, avatarImageIndex, tags, isPublic, membershipOption, isPublicTopicAdminOnly, allowChat, chatSecurity, callsign, locale, homepage, enableInvitationMessagingForAdmins, defaultPublicity, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Edit/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            name,
            about,
            motto,
            theme,
            avatarImageIndex,
            tags,
            isPublic,
            membershipOption,
            isPublicTopicAdminOnly,
            allowChat,
            chatSecurity,
            callsign,
            locale,
            homepage,
            enableInvitationMessagingForAdmins,
            defaultPublicity,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Edit an existing group's clan banner.
     * @param groupId Group ID of the group to edit.
     * @param decalId
     * @param decalColorId
     * @param decalBackgroundColorId
     * @param gonfalonId
     * @param gonfalonColorId
     * @param gonfalonDetailId
     * @param gonfalonDetailColorId
     * @param tokens The optional tokens that can be applied.
     * @returns Edit an existing group's clan banner.
     */
    EditClanBanner(groupId, decalId, decalColorId, decalBackgroundColorId, gonfalonId, gonfalonColorId, gonfalonDetailId, gonfalonDetailColorId, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/EditClanBanner/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            decalId,
            decalColorId,
            decalBackgroundColorId,
            gonfalonId,
            gonfalonColorId,
            gonfalonDetailId,
            gonfalonDetailColorId,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Edit group options only available to a founder.
     * @param groupId Group ID of the group to edit.
     * @param InvitePermissionOverride
     * @param UpdateCulturePermissionOverride
     * @param HostGuidedGamePermissionOverride
     * @param UpdateBannerPermissionOverride
     * @param JoinLevel
     * @param tokens The optional tokens that can be applied.
     * @returns Group options only available to a founder.
     */
    EditFounderOptions(groupId, InvitePermissionOverride, UpdateCulturePermissionOverride, HostGuidedGamePermissionOverride, UpdateBannerPermissionOverride, JoinLevel, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/EditFounderOptions/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            InvitePermissionOverride,
            UpdateCulturePermissionOverride,
            HostGuidedGamePermissionOverride,
            UpdateBannerPermissionOverride,
            JoinLevel,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Add a new optional conversation/chat channel. Requires admin permissions to the group.
     * @param groupId Group ID of the group to edit.
     * @param chatName
     * @param chatSecurity
     * @param tokens The optional tokens that can be applied.
     * @returns A new optional conversation/chat channel. Requires admin permissions to the group.
     */
    AddOptionalConversation(groupId, chatName, chatSecurity, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/OptionalConversations/Add/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            chatName,
            chatSecurity,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
     * @param conversationId Conversation Id of the channel being edited.
     * @param groupId Group ID of the group to edit.
     * @param chatEnabled
     * @param chatName
     * @param chatSecurity
     * @param tokens The optional tokens that can be applied.
     * @returns The settings of an optional conversation/chat channel. Requires admin permissions to the group.
     */
    EditOptionalConversation(conversationId, groupId, chatEnabled, chatName, chatSecurity, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/OptionalConversations/Edit/${conversationId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            chatEnabled,
            chatName,
            chatSecurity,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Get the list of members in a given group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param groupId The ID of the group.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns The list of members in a given group.
     */
    GetMembersOfGroup(currentpage, groupId, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/GroupV2/${groupId}/Members/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Get the list of members in a given group who are of admin level or higher.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param groupId The ID of the group.
     * @param tokens The optional tokens that can be applied.
     * @returns The list of members in a given group who are of admin level or higher.
     */
    GetAdminsAndFounderOfGroup(currentpage, groupId, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
     * @param groupId ID of the group to which the member belongs.
     * @param membershipId Membership ID to modify.
     * @param membershipType Membership type of the provide membership ID.
     * @param memberType New membertype for the specified member.
     * @param tokens The optional tokens that can be applied.
     * @returns The membership type of a given member. You must have suitable permissions in the group to perform this operation.
     */
    EditGroupMembership(groupId, membershipId, membershipType, memberType, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/${membershipType}/${membershipId}/SetMembershipType/${memberType}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders);
    }
    /**
     * Kick a member from the given group, forcing them to reapply if they wish to re-join the group.
     * @param groupId Group ID to kick the user from.
     * @param membershipId Membership ID to kick.
     * @param membershipType Membership type of the provided membership ID.
     * @param tokens The optional tokens that can be applied.
     * @returns A member from the given group, forcing them to reapply if they wish to re-join the group.
     */
    KickMember(groupId, membershipId, membershipType, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/${membershipType}/${membershipId}/Kick/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders);
    }
    /**
     * Bans the requested member from the requested group for the specified period of time.
     * @param groupId Group ID that has the member to ban.
     * @param membershipId Membership ID of the member to ban from the group.
     * @param membershipType Membership type of the provided membership ID.
     * @param comment
     * @param length
     * @param tokens The optional tokens that can be applied.
     * @returns The requested member from the requested group for the specified period of time.
     */
    BanMember(groupId, membershipId, membershipType, comment, length, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/${membershipType}/${membershipId}/Ban/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            comment,
            length,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Unbans the requested member, allowing them to re-apply for membership.
     * @param groupId Group ID that has the member to ban.
     * @param membershipId Membership ID of the member to ban from the group.
     * @param membershipType Membership type of the provided membership ID.
     * @param tokens The optional tokens that can be applied.
     * @returns The requested member, allowing them to re-apply for membership.
     */
    UnbanMember(groupId, membershipId, membershipType, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/${membershipType}/${membershipId}/Unban/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders);
    }
    /**
     * Get the list of banned members in a given group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 entries.
     * @param groupId Group ID whose banned members you are fetching
     * @param tokens The optional tokens that can be applied.
     * @returns The list of banned members in a given group.
     */
    GetBannedMembersOfGroup(currentpage, groupId, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Banned/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
     * @param founderIdNew The new founder for this group. Must already be a group admin.
     * @param groupId The target group id.
     * @param membershipType Membership type of the provided founderIdNew.
     * @param tokens The optional tokens that can be applied.
     * @returns Administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
     */
    AbdicateFoundership(founderIdNew, groupId, membershipType, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Admin/AbdicateFoundership/${membershipType}/${founderIdNew}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders);
    }
    /**
     * Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param groupId ID of the group.
     * @param tokens The optional tokens that can be applied.
     * @returns The list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
     */
    GetPendingMemberships(currentpage, groupId, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/Pending/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Get the list of users who have been invited into the group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param groupId ID of the group.
     * @param tokens The optional tokens that can be applied.
     * @returns The list of users who have been invited into the group.
     */
    GetInvitedIndividuals(currentpage, groupId, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/InvitedIndividuals/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Approve all of the pending users for the given group.
     * @param groupId ID of the group.
     * @param message
     * @param tokens The optional tokens that can be applied.
     * @returns All of the pending users for the given group.
     */
    ApproveAllPending(groupId, message, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/ApproveAll/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            message,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Deny all of the pending users for the given group.
     * @param groupId ID of the group.
     * @param message
     * @param tokens The optional tokens that can be applied.
     * @returns All of the pending users for the given group.
     */
    DenyAllPending(groupId, message, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/DenyAll/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            message,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Approve all of the pending users for the given group.
     * @param groupId ID of the group.
     * @param memberships
     * @param message
     * @param tokens The optional tokens that can be applied.
     * @returns All of the pending users for the given group.
     */
    ApprovePendingForList(groupId, memberships, message, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/ApproveList/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            memberships,
            message,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Approve the given membershipId to join the group/clan as long as they have applied.
     * @param groupId ID of the group.
     * @param membershipId The membership id being approved.
     * @param membershipType Membership type of the supplied membership ID.
     * @param message
     * @param tokens The optional tokens that can be applied.
     * @returns The given membershipId to join the group/clan as long as they have applied.
     */
    ApprovePending(groupId, membershipId, membershipType, message, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/Approve/${membershipType}/${membershipId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            message,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Deny all of the pending users for the given group that match the passed-in .
     * @param groupId ID of the group.
     * @param memberships
     * @param message
     * @param tokens The optional tokens that can be applied.
     * @returns All of the pending users for the given group that match the passed-in .
     */
    DenyPendingForList(groupId, memberships, message, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/DenyList/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            memberships,
            message,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Get information about the groups that a given member has joined.
     * @param filter Filter apply to list of joined groups.
     * @param groupType Type of group the supplied member founded.
     * @param membershipId Membership ID to for which to find founded groups.
     * @param membershipType Membership type of the supplied membership ID.
     * @param tokens The optional tokens that can be applied.
     * @returns Information about the groups that a given member has joined.
     */
    GetGroupsForMember(filter, groupType, membershipId, membershipType, tokens) {
        const requestURL = `${this.url}/GroupV2/User/${membershipType}/${membershipId}/${filter}/${groupType}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Allows a founder to manually recover a group they can see in game but not on bungie.net
     * @param groupType Type of group the supplied member founded.
     * @param membershipId Membership ID to for which to find founded groups.
     * @param membershipType Membership type of the supplied membership ID.
     * @param tokens The optional tokens that can be applied.
     * @returns A founder to manually recover a group they can see in game but not on bungie.net
     */
    RecoverGroupForFounder(groupType, membershipId, membershipType, tokens) {
        const requestURL = `${this.url}/GroupV2/Recover/${membershipType}/${membershipId}/${groupType}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Get information about the groups that a given member has applied to or been invited to.
     * @param filter Filter apply to list of potential joined groups.
     * @param groupType Type of group the supplied member applied.
     * @param membershipId Membership ID to for which to find applied groups.
     * @param membershipType Membership type of the supplied membership ID.
     * @param tokens The optional tokens that can be applied.
     * @returns Information about the groups that a given member has applied to or been invited to.
     */
    GetPotentialGroupsForMember(filter, groupType, membershipId, membershipType, tokens) {
        const requestURL = `${this.url}/GroupV2/User/Potential/${membershipType}/${membershipId}/${filter}/${groupType}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Invite a user to join this group.
     * @param groupId ID of the group you would like to join.
     * @param membershipId Membership id of the account being invited.
     * @param membershipType MembershipType of the account being invited.
     * @param message
     * @param tokens The optional tokens that can be applied.
     * @returns A user to join this group.
     */
    IndividualGroupInvite(groupId, membershipId, membershipType, message, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/IndividualInvite/${membershipType}/${membershipId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            message,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Cancels a pending invitation to join a group.
     * @param groupId ID of the group you would like to join.
     * @param membershipId Membership id of the account being cancelled.
     * @param membershipType MembershipType of the account being cancelled.
     * @param tokens The optional tokens that can be applied.
     * @returns A pending invitation to join a group.
     */
    IndividualGroupInviteCancel(groupId, membershipId, membershipType, tokens) {
        const requestURL = `${this.url}/GroupV2/${groupId}/Members/IndividualInviteCancel/${membershipType}/${membershipId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders);
    }
}
exports.GroupV2 = GroupV2;
