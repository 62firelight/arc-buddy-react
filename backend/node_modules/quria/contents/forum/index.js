"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Forum = void 0;
const http_request_1 = require("../../adapters/http-request");
const utils_1 = require("../../adapters/utils");
class Forum {
    url;
    headers;
    constructor(url, headers) {
        this.url = url;
        this.headers = headers;
    }
    /**
     * Get topics from any forum.
     * @param categoryFilter A category filter.
     * @param group The group, if any.
     * @param page Zero paged page number
     * @param pageSize Unused
     * @param quickDate A date filter.
     * @param sort The sort mode.
     * @param queryString The optional querystrings that can be applied.
     * @returns Topics from any forum.
     */
    GetTopicsPaged(categoryFilter, group, page, pageSize, quickDate, sort, queryString) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Forum/GetTopicsPaged/${page}/${pageSize}/${group}/${sort}/${quickDate}/${categoryFilter}/`, queryString);
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Gets a listing of all topics marked as part of the core group.
     * @param categoryFilter The category filter.
     * @param page Zero base page
     * @param quickDate The date filter.
     * @param sort The sort mode.
     * @param queryString The optional querystrings that can be applied.
     * @returns A listing of all topics marked as part of the core group.
     */
    GetCoreTopicsPaged(categoryFilter, page, quickDate, sort, queryString) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Forum/GetCoreTopicsPaged/${page}/${sort}/${quickDate}/${categoryFilter}/`, queryString);
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
     * @param getParentPost
     * @param page
     * @param pageSize
     * @param parentPostId
     * @param replySize
     * @param rootThreadMode
     * @param sortMode
     * @param queryString The optional querystrings that can be applied.
     * @returns A thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
     */
    GetPostsThreadedPaged(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, queryString) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Forum/GetPostsThreadedPaged/${parentPostId}/${page}/${pageSize}/${replySize}/${getParentPost}/${rootThreadMode}/${sortMode}/`, queryString);
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
     * @param childPostId
     * @param page
     * @param pageSize
     * @param replySize
     * @param rootThreadMode
     * @param sortMode
     * @param queryString The optional querystrings that can be applied.
     * @returns A thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
     */
    GetPostsThreadedPagedFromChild(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, queryString) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Forum/GetPostsThreadedPagedFromChild/${childPostId}/${page}/${pageSize}/${replySize}/${rootThreadMode}/${sortMode}/`, queryString);
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Returns the post specified and its immediate parent.
     * @param childPostId
     * @param queryString The optional querystrings that can be applied.
     * @returns The post specified and its immediate parent.
     */
    GetPostAndParent(childPostId, queryString) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Forum/GetPostAndParent/${childPostId}/`, queryString);
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Returns the post specified and its immediate parent of posts that are awaiting approval.
     * @param childPostId
     * @param queryString The optional querystrings that can be applied.
     * @returns The post specified and its immediate parent of posts that are awaiting approval.
     */
    GetPostAndParentAwaitingApproval(childPostId, queryString) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Forum/GetPostAndParentAwaitingApproval/${childPostId}/`, queryString);
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Gets the post Id for the given content item's comments, if it exists.
     * @param contentId
     * @returns Gets the post Id for the given content item's comments, if it exists.
     */
    GetTopicForContent(contentId) {
        const requestURL = `${this.url}/Forum/GetTopicForContent/${contentId}/`;
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
     * @returns Tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
     */
    GetForumTagSuggestions(queryString) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Forum/GetForumTagSuggestions/`, queryString);
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Gets the specified forum poll.
     * @param topicId The post id of the topic that has the poll.
     * @returns The specified forum poll.
     */
    GetPoll(topicId) {
        const requestURL = `${this.url}/Forum/Poll/${topicId}/`;
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
}
exports.Forum = Forum;
