"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const http_request_1 = require("../../adapters/http-request");
const utils_1 = require("../../adapters/utils");
class User {
    url;
    headers;
    constructor(url, headers) {
        this.url = url;
        this.headers = headers;
    }
    /**
     * Loads a bungienet user by membership id.
     * @param id The requested Bungie.net membership id.
     * @param tokens The optional tokens that can be applied.
     * @returns A bungienet user by membership id.
     */
    GetBungieNetUserById(id, tokens) {
        const requestURL = `${this.url}/User/GetBungieNetUserById/${id}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets a list of all display names linked to this membership id but sanitized.
     * @param membershipId The requested membership id to load.
     * @param tokens The optional tokens that can be applied.
     * @returns A list of all display names linked to this membership id but sanitized.
     */
    GetSanitizedPlatformDisplayNames(membershipId, tokens) {
        const requestURL = `${this.url}/User/GetSanitizedPlatformDisplayNames/${membershipId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Returns a list of credential types attached to the requested account.
     * @param membershipId The user's membership id.
     * @param tokens The optional tokens that can be applied.
     * @returns A list of credential types attached to the requested account.
     */
    GetCredentialTypesForTargetAccount(membershipId, tokens) {
        const requestURL = `${this.url}/User/GetCredentialTypesForTargetAccount/${membershipId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Returns a list of all available user themes.
     * @returns A list of all available user themes.
     */
    GetAvailableThemes() {
        const requestURL = `${this.url}/User/GetAvailableThemes/`;
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Returns a list of accounts associated with the supplied membership ID and membership type.
     * @param membershipId The membership ID of the target user.
     * @param membershipType The types of membership the Accounts system supports.
     * @param tokens The optional tokens that can be applied.
     * @returns A list of accounts associated with the supplied membership ID and membership type.
     */
    GetMembershipDataById(membershipId, membershipType, tokens) {
        const requestURL = `${this.url}/User/GetMembershipsById/${membershipId}/${membershipType}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Returns a list of accounts associated with signed in user.
     * @returns A list of accounts associated with signed in user.
     */
    GetMembershipDataForCurrentUser(tokens) {
        const requestURL = `${this.url}/User/GetMembershipsForCurrentUser/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets any hard linked membership given a credential.
     * @param credential The credential to look up. Must be a valid SteamID64.
     * @param crType The credential type. 'SteamId' is the only valid value at present.
     * @param tokens The optional tokens that can be applied.
     * @returns Any hard linked membership given a credential.
     */
    GetMembershipFromHardLinkedCredential(credential, crType, tokens) {
        const requestURL = `${this.url}/User/GetMembershipFromHardLinkedCredential/${crType}/${credential}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * @deprecated Do not use this to search users, use SearchByGlobalNamePost instead.
     */
    SearchByGlobalNamePrefix(displayNamePrefix, page, tokens) {
        const requestURL = `${this.url}/User/Search/Prefix/${displayNamePrefix}/${page}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Given the prefix of a global display name, returns all users who share that name.
     * @param page The zero-based page of results you desire.
     * @param displayNamePrefix
     * @param tokens The optional tokens that can be applied.
     * @returns The prefix of a global display name, returns all users who share that name.
     */
    SearchByGlobalNamePost(page, displayNamePrefix, tokens) {
        const requestURL = `${this.url}/User/Search/GlobalName/${page}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            displayNamePrefix,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
}
exports.User = User;
