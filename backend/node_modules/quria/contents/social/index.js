"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Social = void 0;
const http_request_1 = require("../../adapters/http-request");
const utils_1 = require("../../adapters/utils");
class Social {
    url;
    headers;
    constructor(url, headers) {
        this.url = url;
        this.headers = headers;
    }
    /**
     * Returns your Bungie Friend list
     * @returns Your Bungie Friend list
     */
    GetFriendList(tokens) {
        const requestURL = `${this.url}/Social/Friends/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Returns your friend request queue.
     * @returns Your friend request queue.
     */
    GetFriendRequestList(tokens) {
        const requestURL = `${this.url}/Social/Friends/Requests/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Requests a friend relationship with the target user. Any of the target user's linked membership ids are valid inputs.
     * @param membershipId The membership id of the user you wish to add.
     * @returns A friend relationship with the target user. Any of the target user's linked membership ids are valid inputs.
     */
    IssueFriendRequest(membershipId, tokens) {
        const requestURL = `${this.url}/Social/Friends/Add/${membershipId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders);
    }
    /**
     * Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to accept.
     * @returns A friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     */
    AcceptFriendRequest(membershipId, tokens) {
        const requestURL = `${this.url}/Social/Friends/Requests/Accept/${membershipId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders);
    }
    /**
     * Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to decline.
     * @returns A friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     */
    DeclineFriendRequest(membershipId, tokens) {
        const requestURL = `${this.url}/Social/Friends/Requests/Decline/${membershipId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders);
    }
    /**
     * Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to remove.
     * @returns A friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
     */
    RemoveFriend(membershipId, tokens) {
        const requestURL = `${this.url}/Social/Friends/Remove/${membershipId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders);
    }
    /**
     * Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to remove.
     * @returns A friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
     */
    RemoveFriendRequest(membershipId, tokens) {
        const requestURL = `${this.url}/Social/Friends/Requests/Remove/${membershipId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders);
    }
    /**
     * Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
     * @param friendPlatform The platform friend type.
     * @param page The zero based page to return. Page size is 100.
     * @returns The platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
     */
    GetPlatformFriendList(friendPlatform, page, tokens) {
        const requestURL = `${this.url}/Social/PlatformFriends/${friendPlatform}/${page}/ `;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
}
exports.Social = Social;
