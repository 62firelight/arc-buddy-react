"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tokens = void 0;
const http_request_1 = require("../../adapters/http-request");
const utils_1 = require("../../adapters/utils");
class Tokens {
    url;
    headers;
    constructor(url, headers) {
        this.url = url;
        this.headers = headers;
    }
    /**
     * Twitch Drops self-repair function - scans twitch for drops not marked as fulfilled and resyncs them.
     */
    ForceDropsRepair(tokens) {
        const requestURL = `${this.url}/Tokens/Partner/ForceDropsRepair/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders);
    }
    /**
     * Claim a partner offer as the authenticated user.
     * @param PartnerOfferId
     * @param BungieNetMembershipId
     * @param TransactionId
     * @returns A partner offer as the authenticated user.
     */
    ClaimPartnerOffer(PartnerOfferId, BungieNetMembershipId, TransactionId, tokens) {
        const requestURL = `${this.url}/Tokens/Partner/ClaimOffer/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            PartnerOfferId,
            BungieNetMembershipId,
            TransactionId,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Apply a partner offer to the targeted user. This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already.
     * @param partnerApplicationId The partner application identifier.
     * @param targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required.
     * @returns A partner offer to the targeted user. This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already.
     */
    ApplyMissingPartnerOffersWithoutClaim(partnerApplicationId, targetBnetMembershipId, tokens) {
        const requestURL = `${this.url}/Tokens/Partner/ApplyMissingOffers/${partnerApplicationId}/${targetBnetMembershipId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders);
    }
    /**
     * Returns the partner rewards history of the targeted user, both partner offers and Twitch drops.
     * @param partnerApplicationId The partner application identifier.
     * @param targetBnetMembershipId The bungie.net user to return reward history for.
     * @param tokens
     */
    GetPartnerRewardHistory(partnerApplicationId, targetBnetMembershipId, tokens) {
        const requestURL = `${this.url}/Tokens/Partner/History/${targetBnetMembershipId}/Application/${partnerApplicationId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Returns the partner sku and offer history of the targeted user. Elevated permissions are required to see users that are not yourself.
     * @param partnerApplicationId The partner application identifier.
     * @param targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required.
     * @returns The partner sku and offer history of the targeted user. Elevated permissions are required to see users that are not yourself.
     */
    GetPartnerOfferSkuHistory(partnerApplicationId, targetBnetMembershipId, tokens) {
        const requestURL = `${this.url}/Tokens/Partner/History/${partnerApplicationId}/${targetBnetMembershipId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Returns the bungie rewards for the targeted user.
     * @param membershipId bungie.net user membershipId for requested user rewards. If not self, elevated permissions are required.
     * @returns The bungie rewards for the targeted user.
     */
    GetBungieRewardsForUser(membershipId, tokens) {
        const requestURL = `${this.url}/Tokens/Rewards/GetRewardsForUser/${membershipId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Returns the bungie rewards for the targeted user when a platform membership Id and Type are used.
     * @param membershipId users platform membershipId for requested user rewards. If not self, elevated permissions are required.
     * @param membershipType The target Destiny 2 membership type.
     * @returns The bungie rewards for the targeted user when a platform membership Id and Type are used.
     */
    GetBungieRewardsForPlatformUser(membershipId, membershipType, tokens) {
        const requestURL = `${this.url}/Tokens/Rewards/GetRewardsForPlatformUser/${membershipId}/${membershipType}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Returns a list of the current bungie rewards
     * @returns A list of the current bungie rewards
     */
    GetBungieRewardsList(tokens) {
        const requestURL = `${this.url}/Tokens/Rewards/BungieRewards/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
}
exports.Tokens = Tokens;
