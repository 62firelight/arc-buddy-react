"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuth = void 0;
const http_request_1 = require("../../adapters/http-request");
const utils_1 = require("../../adapters/utils");
class OAuth {
    authUrl;
    tokenUrl;
    headers;
    client_id;
    client_secret;
    constructor(authUrl, tokenUrl, headers, client_id, client_secret) {
        this.authUrl = authUrl;
        this.tokenUrl = tokenUrl;
        this.headers = headers;
        this.client_id = client_id;
        this.client_secret = client_secret;
    }
    btoa(data) {
        return Buffer.from(data).toString("base64");
    }
    encodeCredentials() {
        return this.btoa(`${this.client_id}:${this.client_secret}`);
    }
    /**
     * Generate authorization url with default client id and state.
     * @param {string} state OPTIONAL: String containing some information, particulary for avoid cross site scripting.
     * @returns Authorization url.
     */
    GenerateAuthorizationURL(state) {
        return (0, utils_1.formatQueryStrings)(this.authUrl, {
            client_id: this.client_id,
            response_type: "code",
            state,
        });
    }
    GetOAuthAccessToken(code) {
        return (0, http_request_1.request)(this.tokenUrl, true, "POST", {
            ...this.headers,
            Authorization: `Basic ${this.encodeCredentials()}`,
            "Content-Type": "application/x-www-form-urlencoded",
        }, `grant_type=authorization_code&code=${encodeURIComponent(code)}`);
    }
    RefreshAccessToken(refresh_token) {
        return (0, http_request_1.request)(this.tokenUrl, true, "POST", {
            ...this.headers,
            Authorization: `Basic ${this.encodeCredentials()}`,
            "Content-Type": "application/x-www-form-urlencoded",
        }, `grant_type=refresh_token&refresh_token=${refresh_token}`);
    }
}
exports.OAuth = OAuth;
