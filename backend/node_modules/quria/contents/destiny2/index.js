"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Destiny = void 0;
const http_request_1 = require("../../adapters/http-request");
const utils_1 = require("../../adapters/utils");
class Destiny {
    url;
    headers;
    constructor(url, headers) {
        this.url = url;
        this.headers = headers;
    }
    /**
     * Getting Destiny Manifest
     */
    GetDestinyManifest() {
        return (0, http_request_1.request)(`${this.url}/Destiny2/Manifest/`, true, "GET", this.headers);
    }
    /**
     * Returns the static definition of an entity of the given Type and hash identifier.
     * @param entityType The type of entity for whom you would like results.
     * @param hashIdentifier The hash identifier for the specific Entity you want returned.
     * @returns The static definition of an entity of the given Type and hash identifier.
     */
    GetDestinyEntityDefinition(entityType, hashIdentifier) {
        const requestURL = `${this.url}/Destiny2/Manifest/${entityType}/${hashIdentifier}/`;
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Returns a list of Destiny memberships given a full Gamertag or PSN ID.
     * @param membershipType A valid non-BungieNet membership type, or All.
     * @param displayName The full gamertag or PSN id of the player.
     * @returns A list of Destiny memberships given a full Gamertag or PSN ID
     */
    SearchDestinyPlayerByBungieName(membershipType, displayName) {
        const requestURL = `${this.url}/Destiny2/SearchDestinyPlayerByBungieName/${membershipType}/`;
        const [name, code] = displayName.split("#");
        const bodyParams = {
            displayName: name,
            displayNameCode: parseInt(code),
        };
        return (0, http_request_1.request)(requestURL, true, "POST", this.headers, JSON.stringify(bodyParams));
    }
    /**
     * Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information.
     * @param membershipId A valid non-BungieNet membership type.
     * @param membershipType Destiny membership ID.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns A summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information.
     */
    GetLinkedProfiles(membershipId, membershipType, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/${membershipType}/Profile/${membershipId}/LinkedProfiles/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Returns Destiny Profile information for the supplied membership.
     * @param destinyMembershipId A valid non-BungieNet membership type.
     * @param membershipType Destiny membership ID.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns Destiny Profile information for the supplied membership.
     */
    GetProfile(destinyMembershipId, membershipType, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/${membershipType}/Profile/${destinyMembershipId}/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Returns character information for the supplied character.
     * @param membershipType ID of the character.
     * @param destinyMembershipId Destiny membership ID.
     * @param characterId A valid non-BungieNet membership type.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns Character information for the supplied character.
     */
    GetCharacter(characterId, destinyMembershipId, membershipType, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/${membershipType}/Profile/${destinyMembershipId}/Character/${characterId}/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
     * @param groupId A valid group id of clan.
     * @param tokens The optional tokens that can be applied.
     * @returns Information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
     */
    GetClanWeeklyRewardState(groupId, tokens) {
        const requestURL = `${this.url}/Destiny2/Clan/${groupId}/WeeklyRewardState/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Returns the dictionary of values for the Clan Banner
     * @returns Returns the dictionary of values for the Clan Banner
     */
    GetClanBannerSource(tokens) {
        const requestURL = `${this.url}/Destiny2/Clan/ClanBannerDictionary/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId.
     * @param destinyMembershipId The membership ID of the destiny profile.
     * @param itemInstanceId The Instance ID of the destiny item.
     * @param membershipType A valid non-BungieNet membership type.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns The details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId.
     */
    GetItem(destinyMembershipId, itemInstanceId, membershipType, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/${membershipType}/Profile/${destinyMembershipId}/Item/${itemInstanceId}/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Returns character information for the supplied character.
     * @param characterId ID of the character.
     * @param destinyMembershipId The membership ID of the destiny profile.
     * @param membershipType A valid non-BungieNet membership type.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns Character information for the supplied character.
     */
    GetVendors(characterId, destinyMembershipId, membershipType, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/${membershipType}/Profile/${destinyMembershipId}/Character/${characterId}/Vendors/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Get the details of a specific Vendor.
     * @param characterId The Destiny Character ID of the character for whom we're getting vendor info.
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied.
     * @param membershipType A valid non-BungieNet membership type.
     * @param vendorHash The Hash identifier of the Vendor to be returned.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns The details of a specific Vendor.
     */
    GetVendor(characterId, destinyMembershipId, membershipType, vendorHash, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/${membershipType}/Profile/${destinyMembershipId}/Character/${characterId}/Vendors/${vendorHash}/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Get items available from vendors where the vendors have items for sale that are common for everyone.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns Items available from vendors where the vendors have items for sale that are common for everyone.
     */
    GetPublicVendors(queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/Vendors/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
     * @param membershipType A valid non-BungieNet membership type.
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied.
     * @param characterId The Destiny Character ID of the character for whom we're getting collectible detail info.
     * @param collectiblePresentationNodeHash The hash identifier of the Presentation Node for whom we should return collectible details
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
     */
    GetCollectibleNodeDetails(characterId, collectiblePresentationNodeHash, destinyMembershipId, membershipType, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/${membershipType}/Profile/${destinyMembershipId}/Character/${characterId}/Collectibles/${collectiblePresentationNodeHash}/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Transfer an item to/from your vault.
     * @param itemReferenceHash
     * @param stackSize
     * @param transferToVault
     * @param itemId
     * @param characterId
     * @param membershipType
     * @param tokens The optional tokens that can be applied.
     * @returns
     */
    TransferItem(itemReferenceHash, stackSize, transferToVault, itemId, characterId, membershipType, tokens) {
        const requestURL = `${this.url}/Destiny2/Actions/Items/TransferItem/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            itemReferenceHash,
            stackSize,
            transferToVault,
            itemId,
            characterId,
            membershipType,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Extract an item from the Postmaster, with whatever implications that may entail.
     * @param itemReferenceHash
     * @param stackSize
     * @param itemId
     * @param characterId
     * @param membershipType
     * @param tokens The optional tokens that can be applied.
     * @returns
     */
    PullFromPostmaster(itemReferenceHash, stackSize, itemId, characterId, membershipType, tokens) {
        const requestURL = `${this.url}/Destiny2/Actions/Items/PullFromPostmaster/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            itemReferenceHash,
            stackSize,
            itemId,
            characterId,
            membershipType,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Equip an item.
     * @param itemId
     * @param characterId
     * @param membershipType
     * @param tokens The optional tokens that can be applied.
     * @returns
     */
    EquipItem(itemId, characterId, membershipType, tokens) {
        const requestURL = `${this.url}/Destiny2/Actions/Items/EquipItem/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            itemId,
            characterId,
            membershipType,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Equip a list of items by itemInstanceIds.
     * @param itemIds
     * @param characterId
     * @param membershipType
     * @param tokens The optional tokens that can be applied.
     * @returns
     */
    EquipItems(itemIds, characterId, membershipType, tokens) {
        const requestURL = `${this.url}/Destiny2/Actions/Items/EquipItems/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            itemIds,
            characterId,
            membershipType,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Set the Lock State for an instanced item.
     * @param state
     * @param itemId
     * @param characterId
     * @param membershipType
     * @param tokens The optional tokens that can be applied.
     * @returns
     */
    SetItemLockState(state, itemId, characterId, membershipType, tokens) {
        const requestURL = `${this.url}/Destiny2/Actions/Items/SetLockState/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            state,
            itemId,
            characterId,
            membershipType,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Set the Tracking State for an instanced item, if that item is a Quest or Bounty.
     * @param state
     * @param itemId
     * @param characterId
     * @param membershipType
     * @param tokens The optional tokens that can be applied.
     * @returns
     */
    SetQuestTrackedState(state, itemId, characterId, membershipType, tokens) {
        const requestURL = `${this.url}/Destiny2/Actions/Items/SetTrackedState/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            state,
            itemId,
            characterId,
            membershipType,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Insert a plug into a socketed item.
     * @param actionToken
     * @param itemInstanceId
     * @param plug
     * @param characterId
     * @param membershipType
     * @param tokens The optional tokens that can be applied.
     * @returns
     */
    InsertSocketPlug(actionToken, itemInstanceId, plug, characterId, membershipType, tokens) {
        const requestURL = `${this.url}/Destiny2/Actions/Items/InsertSocketPlug/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            actionToken,
            itemInstanceId,
            plug,
            characterId,
            membershipType,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Insert a 'free' plug into an item's socket.
     * @param plug
     * @param itemId
     * @param characterId
     * @param membershipType
     * @param tokens The optional tokens that can be applied.
     * @returns
     */
    InsertSocketPlugFree(plug, itemId, characterId, membershipType, tokens) {
        const requestURL = `${this.url}/Destiny2/Actions/Items/InsertSocketPlugFree/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            plug,
            itemId,
            characterId,
            membershipType,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Gets the available post game carnage report for the activity ID.
     * @param activityId The ID of the activity whose PGCR is requested.
     * @param tokens The optional tokens that can be applied.
     * @returns The available post game carnage report for the activity ID.
     */
    GetPostGameCarnageReport(activityId, tokens) {
        const requestURL = `${this.url}/Destiny2/Stats/PostGameCarnageReport/${activityId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Report a player that you met in an activity that was engaging in ToS-violating activities.
     * @param activityId The ID of the activity where you ran into the brigand that you're reporting.
     * @param reasonCategoryHashes These are hash identifiers that map to DestinyReportReasonCategoryDefinition entries.
     * @param reasonHashes If applicable, provide a more specific reason(s) within the general category of problems provided by the reasonHash.
     * @param offendingCharacterId Within the PGCR provided when calling the Reporting endpoint, this should be the character ID of the user that you thought was violating terms of use.
     * @param tokens The optional tokens that can be applied.
     * @returns A player that you met in an activity that was engaging in ToS-violating activities.
     */
    ReportOffensivePostGameCarnageReportPlayer(activityId, reasonCategoryHashes, reasonHashes, offendingCharacterId, tokens) {
        const requestURL = `${this.url}/Destiny2/Stats/PostGameCarnageReport/${activityId}/Report/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            reasonCategoryHashes,
            reasonHashes,
            offendingCharacterId,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Gets historical stats definitions.
     * @param tokens The optional tokens that can be applied.
     * @returns Historical stats definitions.
     */
    GetHistoricalStatsDefinition(tokens) {
        const requestURL = `${this.url}/Destiny2/Stats/Definition/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns Leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.
     */
    GetClanLeaderboards(groupId, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/Stats/Leaderboards/Clans/${groupId}/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns Aggregated stats for a clan using the same categories as the clan leaderboards.
     */
    GetClanAggregateStats(groupId, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/Stats/AggregateClanStats/${groupId}/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns Leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.
     */
    GetLeaderboards(destinyMembershipId, membershipType, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/${membershipType}/Account/${destinyMembershipId}/Stats/Leaderboards/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.
     * @param characterId The specific character to build the leaderboard around for the provided Destiny Membership.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns Leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.
     */
    GetLeaderboardsForCharacter(characterId, destinyMembershipId, membershipType, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/Stats/Leaderboards/${membershipType}/${destinyMembershipId}/${characterId}/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets a page list of Destiny items.
     * @param searchTerm The string to use when searching for Destiny entities.
     * @param type The type of entity for whom you would like results.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns A page list of Destiny items.
     */
    SearchDestinyEntities(searchTerm, type, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/Armory/Search/${type}/${searchTerm}/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets historical stats for indicated character.
     * @param characterId The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns Historical stats for indicated character.
     */
    GetHistoricalStats(characterId, destinyMembershipId, membershipType, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/${membershipType}/Account/${destinyMembershipId}/Character/${characterId}/Stats/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets aggregate historical stats organized around each character for a given account.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns Aggregate historical stats organized around each character for a given account.
     */
    GetHistoricalStatsForAccount(destinyMembershipId, membershipType, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/${membershipType}/Account/${destinyMembershipId}/Stats/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets activity history stats for indicated character.
     * @param characterId The id of the character to retrieve.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param queryString The optional querystrings that can be applied.
     * @param tokens The optional tokens that can be applied.
     * @returns Activity history stats for indicated character.
     */
    GetActivityHistory(characterId, destinyMembershipId, membershipType, queryString, tokens) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Destiny2/${membershipType}/Account/${destinyMembershipId}/Character/${characterId}/Stats/Activities/`, queryString);
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets details about unique weapon usage, including all exotic weapons.
     * @param characterId The id of the character to retrieve.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param tokens The optional tokens that can be applied.
     * @returns Details about unique weapon usage, including all exotic weapons.
     */
    GetUniqueWeaponHistory(characterId, destinyMembershipId, membershipType, tokens) {
        const requestURL = `${this.url}/Destiny2/${membershipType}/Account/${destinyMembershipId}/Character/${characterId}/Stats/UniqueWeapons/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets all activities the character has participated in together with aggregate statistics for those activities.
     * @param characterId The specific character whose activities should be returned.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param tokens The optional tokens that can be applied.
     * @returns All activities the character has participated in together with aggregate statistics for those activities.
     */
    GetDestinyAggregateActivityStats(characterId, destinyMembershipId, membershipType, tokens) {
        const requestURL = `${this.url}/Destiny2/${membershipType}/Account/${destinyMembershipId}/Character/${characterId}/Stats/AggregateActivityStats/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets custom localized content for the milestone of the given hash, if it exists.
     * @param milestoneHash The identifier for the milestone to be returned.
     * @param tokens The optional tokens that can be applied.
     * @returns Custom localized content for the milestone of the given hash, if it exists.
     */
    GetPublicMilestoneContent(milestoneHash, tokens) {
        const requestURL = `${this.url}/Destiny2/Milestones/${milestoneHash}/Content/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Gets public information about currently available Milestones.
     * @param tokens The optional tokens that can be applied.
     * @returns Public information about currently available Milestones.
     */
    GetPublicMilestones(tokens) {
        const requestURL = `${this.url}/Destiny2/Milestones/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
    /**
     * Initialize a request to perform an advanced write action.
     * @param type Type of advanced write action.
     * @param affectedItemId Item instance ID the action shall be applied to.
     * @param membershipType Destiny membership type of the account to modify.
     * @param characterId Destiny character ID, if applicable, that will be affected by the action.
     * @param tokens The optional tokens that can be applied.
     * @returns A request to perform an advanced write action.
     */
    AwaInitializeRequest(type, affectedItemId, membershipType, characterId, tokens) {
        const requestURL = `${this.url}/Destiny2/Awa/Initialize/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            type,
            affectedItemId,
            membershipType,
            characterId,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
     * @param selection Indication of the selection the user has made.
     * @param correlationId Correlation ID of the request.
     * @param nonce Secret nonce received via the PUSH notification.
     * @param tokens The optional tokens that can be applied.
     * @returns The result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
     */
    AwaProvideAuthorizationResult(selection, correlationId, nonce, tokens) {
        const requestURL = `${this.url}/Destiny2/Awa/AwaProvideAuthorizationResult/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        const bodyParams = {
            selection,
            correlationId,
            nonce,
        };
        return (0, http_request_1.request)(requestURL, true, "POST", authHeaders, JSON.stringify(bodyParams));
    }
    /**
     * Returns the action token if user approves the request.
     * @param correlationId The identifier for the advanced write action request.
     * @param tokens The optional tokens that can be applied.
     * @returns The action token if user approves the request.
     */
    AwaGetActionToken(correlationId, tokens) {
        const requestURL = `${this.url}/Destiny2/Awa/GetActionToken/${correlationId}/`;
        const authHeaders = (0, utils_1.parseAuthenticationHeaders)(this.headers, tokens);
        return (0, http_request_1.request)(requestURL, true, "GET", authHeaders);
    }
}
exports.Destiny = Destiny;
