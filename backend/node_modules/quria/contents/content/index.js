"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Content = void 0;
const http_request_1 = require("../../adapters/http-request");
const utils_1 = require("../../adapters/utils");
class Content {
    url;
    headers;
    constructor(url, headers) {
        this.url = url;
        this.headers = headers;
    }
    /**
     * Gets an object describing a particular variant of content.
     * @param type
     * @returns An object describing a particular variant of content.
     */
    GetContentType(type) {
        const requestURL = `${this.url}/Content/GetContentType/${type}/`;
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Returns a content item referenced by id
     * @param id
     * @param locale
     * @param queryString The optional querystrings that can be applied.
     * @returns A content item referenced by id
     */
    GetContentById(id, locale, queryString) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Content/GetContentById/${id}/${locale}/`, queryString);
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Returns the newest item that matches a given tag and Content Type.
     * @param locale
     * @param tag
     * @param type
     * @param queryString The optional querystrings that can be applied.
     * @returns The newest item that matches a given tag and Content Type.
     */
    GetContentByTagAndType(locale, tag, type, queryString) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Content/GetContentByTagAndType/${tag}/${type}/${locale}/`, queryString);
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Gets content based on querystring information passed in.
     * @param locale
     * @param queryString The optional querystrings that can be applied.
     * @returns Content based on querystring information passed in.
     */
    SearchContentWithText(locale, queryString) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Content/Search/${locale}/`, queryString);
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Searches for Content Items that match the given Tag and Content Type.
     * @param locale
     * @param tag
     * @param type
     * @param queryString The optional querystrings that can be applied.
     * @returns For Content Items that match the given Tag and Content Type.
     */
    SearchContentByTagAndType(locale, tag, type, queryString) {
        const requestURL = (0, utils_1.formatQueryStrings)(`${this.url}/Content/SearchContentByTagAndType/${tag}/${type}/${locale}/`, queryString);
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Search for Help Articles.
     * @param searchtext
     * @param size
     * @returns Help Articles.
     */
    SearchHelpArticles(searchtext, size) {
        const requestURL = `${this.url}/Content/SearchHelpArticles/${searchtext}/${size}/`;
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
    /**
     * Returns a JSON string response that is the RSS feed for news articles.
     * @param pageToken Zero-based pagination token for paging through result sets.
     * @returns A JSON string response that is the RSS feed for news articles.
     */
    RssNewsArticles(pageToken) {
        const requestURL = `${this.url}/Content/Rss/NewsArticles/${pageToken}/`;
        return (0, http_request_1.request)(requestURL, true, "GET", this.headers);
    }
}
exports.Content = Content;
